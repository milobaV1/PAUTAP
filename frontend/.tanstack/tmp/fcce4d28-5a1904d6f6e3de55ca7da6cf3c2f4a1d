/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AdminAuthRouteImport } from './routes/_admin-auth'
import { Route as AuthuserLayoutRouteImport } from './routes/_auth/(user)/_layout'
import { Route as AdminAuthAdminLayoutRouteImport } from './routes/_admin-auth/admin/_layout'
import { Route as AuthuserLayoutIndexRouteImport } from './routes/_auth/(user)/_layout/index'
import { Route as AdminAuthAdminLayoutIndexRouteImport } from './routes/_admin-auth/admin/_layout/index'
import { Route as AuthuserLayoutTriviaIndexRouteImport } from './routes/_auth/(user)/_layout/trivia/index'
import { Route as AuthuserLayoutSessionIndexRouteImport } from './routes/_auth/(user)/_layout/session/index'
import { Route as AuthuserLayoutProgramIndexRouteImport } from './routes/_auth/(user)/_layout/program/index'
import { Route as AuthuserLayoutCertificateIndexRouteImport } from './routes/_auth/(user)/_layout/certificate/index'
import { Route as AdminAuthAdminLayoutUserIndexRouteImport } from './routes/_admin-auth/admin/_layout/user/index'
import { Route as AdminAuthAdminLayoutQuestionIndexRouteImport } from './routes/_admin-auth/admin/_layout/question/index'
import { Route as AuthuserLayoutSessionIdIndexRouteImport } from './routes/_auth/(user)/_layout/session/$id/index'
import { Route as AuthuserLayoutProgramIdIndexRouteImport } from './routes/_auth/(user)/_layout/program/$id/index'
import { Route as AuthuserLayoutSessionIdResultRouteImport } from './routes/_auth/(user)/_layout/session/$id/result'
import { Route as AuthuserLayoutSessionIdCategoryCategoryIdIndexRouteImport } from './routes/_auth/(user)/_layout/session/$id/category/$categoryId/index'
import { Route as AuthuserLayoutProgramIdCourseCourseIdIndexRouteImport } from './routes/_auth/(user)/_layout/program/$id/course/$courseId/index'
import { Route as AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRouteImport } from './routes/_auth/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId'

const AuthuserRouteImport = createFileRoute('/_auth/(user)')()
const AdminAuthAdminRouteImport = createFileRoute('/_admin-auth/admin')()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAuthRoute = AdminAuthRouteImport.update({
  id: '/_admin-auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthuserRoute = AuthuserRouteImport.update({
  id: '/(user)',
  getParentRoute: () => AuthRoute,
} as any)
const AdminAuthAdminRoute = AdminAuthAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AdminAuthRoute,
} as any)
const AuthuserLayoutRoute = AuthuserLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthuserRoute,
} as any)
const AdminAuthAdminLayoutRoute = AdminAuthAdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AdminAuthAdminRoute,
} as any)
const AuthuserLayoutIndexRoute = AuthuserLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthuserLayoutRoute,
} as any)
const AdminAuthAdminLayoutIndexRoute =
  AdminAuthAdminLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AuthuserLayoutTriviaIndexRoute =
  AuthuserLayoutTriviaIndexRouteImport.update({
    id: '/trivia/',
    path: '/trivia/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutSessionIndexRoute =
  AuthuserLayoutSessionIndexRouteImport.update({
    id: '/session/',
    path: '/session/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutProgramIndexRoute =
  AuthuserLayoutProgramIndexRouteImport.update({
    id: '/program/',
    path: '/program/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutCertificateIndexRoute =
  AuthuserLayoutCertificateIndexRouteImport.update({
    id: '/certificate/',
    path: '/certificate/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AdminAuthAdminLayoutUserIndexRoute =
  AdminAuthAdminLayoutUserIndexRouteImport.update({
    id: '/user/',
    path: '/user/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AdminAuthAdminLayoutQuestionIndexRoute =
  AdminAuthAdminLayoutQuestionIndexRouteImport.update({
    id: '/question/',
    path: '/question/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AuthuserLayoutSessionIdIndexRoute =
  AuthuserLayoutSessionIdIndexRouteImport.update({
    id: '/session/$id/',
    path: '/session/$id/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutProgramIdIndexRoute =
  AuthuserLayoutProgramIdIndexRouteImport.update({
    id: '/program/$id/',
    path: '/program/$id/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutSessionIdResultRoute =
  AuthuserLayoutSessionIdResultRouteImport.update({
    id: '/session/$id/result',
    path: '/session/$id/result',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute =
  AuthuserLayoutSessionIdCategoryCategoryIdIndexRouteImport.update({
    id: '/session/$id/category/$categoryId/',
    path: '/session/$id/category/$categoryId/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutProgramIdCourseCourseIdIndexRoute =
  AuthuserLayoutProgramIdCourseCourseIdIndexRouteImport.update({
    id: '/program/$id/course/$courseId/',
    path: '/program/$id/course/$courseId/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute =
  AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRouteImport.update(
    {
      id: '/program/$id/course/$courseId/assessment/$assessmentId',
      path: '/program/$id/course/$courseId/assessment/$assessmentId',
      getParentRoute: () => AuthuserLayoutRoute,
    } as any,
  )

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/admin': typeof AdminAuthAdminLayoutRouteWithChildren
  '/': typeof AuthuserLayoutIndexRoute
  '/admin/': typeof AdminAuthAdminLayoutIndexRoute
  '/admin/question': typeof AdminAuthAdminLayoutQuestionIndexRoute
  '/admin/user': typeof AdminAuthAdminLayoutUserIndexRoute
  '/certificate': typeof AuthuserLayoutCertificateIndexRoute
  '/program': typeof AuthuserLayoutProgramIndexRoute
  '/session': typeof AuthuserLayoutSessionIndexRoute
  '/trivia': typeof AuthuserLayoutTriviaIndexRoute
  '/session/$id/result': typeof AuthuserLayoutSessionIdResultRoute
  '/program/$id': typeof AuthuserLayoutProgramIdIndexRoute
  '/session/$id': typeof AuthuserLayoutSessionIdIndexRoute
  '/program/$id/course/$courseId': typeof AuthuserLayoutProgramIdCourseCourseIdIndexRoute
  '/session/$id/category/$categoryId': typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
  '/program/$id/course/$courseId/assessment/$assessmentId': typeof AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof AdminAuthAdminLayoutIndexRoute
  '/': typeof AuthuserLayoutIndexRoute
  '/admin/question': typeof AdminAuthAdminLayoutQuestionIndexRoute
  '/admin/user': typeof AdminAuthAdminLayoutUserIndexRoute
  '/certificate': typeof AuthuserLayoutCertificateIndexRoute
  '/program': typeof AuthuserLayoutProgramIndexRoute
  '/session': typeof AuthuserLayoutSessionIndexRoute
  '/trivia': typeof AuthuserLayoutTriviaIndexRoute
  '/session/$id/result': typeof AuthuserLayoutSessionIdResultRoute
  '/program/$id': typeof AuthuserLayoutProgramIdIndexRoute
  '/session/$id': typeof AuthuserLayoutSessionIdIndexRoute
  '/program/$id/course/$courseId': typeof AuthuserLayoutProgramIdCourseCourseIdIndexRoute
  '/session/$id/category/$categoryId': typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
  '/program/$id/course/$courseId/assessment/$assessmentId': typeof AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_admin-auth': typeof AdminAuthRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_admin-auth/admin': typeof AdminAuthAdminRouteWithChildren
  '/_admin-auth/admin/_layout': typeof AdminAuthAdminLayoutRouteWithChildren
  '/_auth/(user)': typeof AuthuserRouteWithChildren
  '/_auth/(user)/_layout': typeof AuthuserLayoutRouteWithChildren
  '/_admin-auth/admin/_layout/': typeof AdminAuthAdminLayoutIndexRoute
  '/_auth/(user)/_layout/': typeof AuthuserLayoutIndexRoute
  '/_admin-auth/admin/_layout/question/': typeof AdminAuthAdminLayoutQuestionIndexRoute
  '/_admin-auth/admin/_layout/user/': typeof AdminAuthAdminLayoutUserIndexRoute
  '/_auth/(user)/_layout/certificate/': typeof AuthuserLayoutCertificateIndexRoute
  '/_auth/(user)/_layout/program/': typeof AuthuserLayoutProgramIndexRoute
  '/_auth/(user)/_layout/session/': typeof AuthuserLayoutSessionIndexRoute
  '/_auth/(user)/_layout/trivia/': typeof AuthuserLayoutTriviaIndexRoute
  '/_auth/(user)/_layout/session/$id/result': typeof AuthuserLayoutSessionIdResultRoute
  '/_auth/(user)/_layout/program/$id/': typeof AuthuserLayoutProgramIdIndexRoute
  '/_auth/(user)/_layout/session/$id/': typeof AuthuserLayoutSessionIdIndexRoute
  '/_auth/(user)/_layout/program/$id/course/$courseId/': typeof AuthuserLayoutProgramIdCourseCourseIdIndexRoute
  '/_auth/(user)/_layout/session/$id/category/$categoryId/': typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
  '/_auth/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId': typeof AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/admin'
    | '/'
    | '/admin/'
    | '/admin/question'
    | '/admin/user'
    | '/certificate'
    | '/program'
    | '/session'
    | '/trivia'
    | '/session/$id/result'
    | '/program/$id'
    | '/session/$id'
    | '/program/$id/course/$courseId'
    | '/session/$id/category/$categoryId'
    | '/program/$id/course/$courseId/assessment/$assessmentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/admin'
    | '/'
    | '/admin/question'
    | '/admin/user'
    | '/certificate'
    | '/program'
    | '/session'
    | '/trivia'
    | '/session/$id/result'
    | '/program/$id'
    | '/session/$id'
    | '/program/$id/course/$courseId'
    | '/session/$id/category/$categoryId'
    | '/program/$id/course/$courseId/assessment/$assessmentId'
  id:
    | '__root__'
    | '/_admin-auth'
    | '/_auth'
    | '/login'
    | '/_admin-auth/admin'
    | '/_admin-auth/admin/_layout'
    | '/_auth/(user)'
    | '/_auth/(user)/_layout'
    | '/_admin-auth/admin/_layout/'
    | '/_auth/(user)/_layout/'
    | '/_admin-auth/admin/_layout/question/'
    | '/_admin-auth/admin/_layout/user/'
    | '/_auth/(user)/_layout/certificate/'
    | '/_auth/(user)/_layout/program/'
    | '/_auth/(user)/_layout/session/'
    | '/_auth/(user)/_layout/trivia/'
    | '/_auth/(user)/_layout/session/$id/result'
    | '/_auth/(user)/_layout/program/$id/'
    | '/_auth/(user)/_layout/session/$id/'
    | '/_auth/(user)/_layout/program/$id/course/$courseId/'
    | '/_auth/(user)/_layout/session/$id/category/$categoryId/'
    | '/_auth/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminAuthRoute: typeof AdminAuthRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin-auth': {
      id: '/_admin-auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/(user)': {
      id: '/_auth/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthuserRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_admin-auth/admin': {
      id: '/_admin-auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAuthAdminRouteImport
      parentRoute: typeof AdminAuthRoute
    }
    '/_auth/(user)/_layout': {
      id: '/_auth/(user)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthuserLayoutRouteImport
      parentRoute: typeof AuthuserRoute
    }
    '/_admin-auth/admin/_layout': {
      id: '/_admin-auth/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAuthAdminLayoutRouteImport
      parentRoute: typeof AdminAuthAdminRoute
    }
    '/_auth/(user)/_layout/': {
      id: '/_auth/(user)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthuserLayoutIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_admin-auth/admin/_layout/': {
      id: '/_admin-auth/admin/_layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminAuthAdminLayoutIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_auth/(user)/_layout/trivia/': {
      id: '/_auth/(user)/_layout/trivia/'
      path: '/trivia'
      fullPath: '/trivia'
      preLoaderRoute: typeof AuthuserLayoutTriviaIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/session/': {
      id: '/_auth/(user)/_layout/session/'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof AuthuserLayoutSessionIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/program/': {
      id: '/_auth/(user)/_layout/program/'
      path: '/program'
      fullPath: '/program'
      preLoaderRoute: typeof AuthuserLayoutProgramIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/certificate/': {
      id: '/_auth/(user)/_layout/certificate/'
      path: '/certificate'
      fullPath: '/certificate'
      preLoaderRoute: typeof AuthuserLayoutCertificateIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_admin-auth/admin/_layout/user/': {
      id: '/_admin-auth/admin/_layout/user/'
      path: '/user'
      fullPath: '/admin/user'
      preLoaderRoute: typeof AdminAuthAdminLayoutUserIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_admin-auth/admin/_layout/question/': {
      id: '/_admin-auth/admin/_layout/question/'
      path: '/question'
      fullPath: '/admin/question'
      preLoaderRoute: typeof AdminAuthAdminLayoutQuestionIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_auth/(user)/_layout/session/$id/': {
      id: '/_auth/(user)/_layout/session/$id/'
      path: '/session/$id'
      fullPath: '/session/$id'
      preLoaderRoute: typeof AuthuserLayoutSessionIdIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/program/$id/': {
      id: '/_auth/(user)/_layout/program/$id/'
      path: '/program/$id'
      fullPath: '/program/$id'
      preLoaderRoute: typeof AuthuserLayoutProgramIdIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/session/$id/result': {
      id: '/_auth/(user)/_layout/session/$id/result'
      path: '/session/$id/result'
      fullPath: '/session/$id/result'
      preLoaderRoute: typeof AuthuserLayoutSessionIdResultRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/session/$id/category/$categoryId/': {
      id: '/_auth/(user)/_layout/session/$id/category/$categoryId/'
      path: '/session/$id/category/$categoryId'
      fullPath: '/session/$id/category/$categoryId'
      preLoaderRoute: typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/program/$id/course/$courseId/': {
      id: '/_auth/(user)/_layout/program/$id/course/$courseId/'
      path: '/program/$id/course/$courseId'
      fullPath: '/program/$id/course/$courseId'
      preLoaderRoute: typeof AuthuserLayoutProgramIdCourseCourseIdIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId': {
      id: '/_auth/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId'
      path: '/program/$id/course/$courseId/assessment/$assessmentId'
      fullPath: '/program/$id/course/$courseId/assessment/$assessmentId'
      preLoaderRoute: typeof AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
  }
}

interface AdminAuthAdminLayoutRouteChildren {
  AdminAuthAdminLayoutIndexRoute: typeof AdminAuthAdminLayoutIndexRoute
  AdminAuthAdminLayoutQuestionIndexRoute: typeof AdminAuthAdminLayoutQuestionIndexRoute
  AdminAuthAdminLayoutUserIndexRoute: typeof AdminAuthAdminLayoutUserIndexRoute
}

const AdminAuthAdminLayoutRouteChildren: AdminAuthAdminLayoutRouteChildren = {
  AdminAuthAdminLayoutIndexRoute: AdminAuthAdminLayoutIndexRoute,
  AdminAuthAdminLayoutQuestionIndexRoute:
    AdminAuthAdminLayoutQuestionIndexRoute,
  AdminAuthAdminLayoutUserIndexRoute: AdminAuthAdminLayoutUserIndexRoute,
}

const AdminAuthAdminLayoutRouteWithChildren =
  AdminAuthAdminLayoutRoute._addFileChildren(AdminAuthAdminLayoutRouteChildren)

interface AdminAuthAdminRouteChildren {
  AdminAuthAdminLayoutRoute: typeof AdminAuthAdminLayoutRouteWithChildren
}

const AdminAuthAdminRouteChildren: AdminAuthAdminRouteChildren = {
  AdminAuthAdminLayoutRoute: AdminAuthAdminLayoutRouteWithChildren,
}

const AdminAuthAdminRouteWithChildren = AdminAuthAdminRoute._addFileChildren(
  AdminAuthAdminRouteChildren,
)

interface AdminAuthRouteChildren {
  AdminAuthAdminRoute: typeof AdminAuthAdminRouteWithChildren
}

const AdminAuthRouteChildren: AdminAuthRouteChildren = {
  AdminAuthAdminRoute: AdminAuthAdminRouteWithChildren,
}

const AdminAuthRouteWithChildren = AdminAuthRoute._addFileChildren(
  AdminAuthRouteChildren,
)

interface AuthuserLayoutRouteChildren {
  AuthuserLayoutIndexRoute: typeof AuthuserLayoutIndexRoute
  AuthuserLayoutCertificateIndexRoute: typeof AuthuserLayoutCertificateIndexRoute
  AuthuserLayoutProgramIndexRoute: typeof AuthuserLayoutProgramIndexRoute
  AuthuserLayoutSessionIndexRoute: typeof AuthuserLayoutSessionIndexRoute
  AuthuserLayoutTriviaIndexRoute: typeof AuthuserLayoutTriviaIndexRoute
  AuthuserLayoutSessionIdResultRoute: typeof AuthuserLayoutSessionIdResultRoute
  AuthuserLayoutProgramIdIndexRoute: typeof AuthuserLayoutProgramIdIndexRoute
  AuthuserLayoutSessionIdIndexRoute: typeof AuthuserLayoutSessionIdIndexRoute
  AuthuserLayoutProgramIdCourseCourseIdIndexRoute: typeof AuthuserLayoutProgramIdCourseCourseIdIndexRoute
  AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute: typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
  AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute: typeof AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}

const AuthuserLayoutRouteChildren: AuthuserLayoutRouteChildren = {
  AuthuserLayoutIndexRoute: AuthuserLayoutIndexRoute,
  AuthuserLayoutCertificateIndexRoute: AuthuserLayoutCertificateIndexRoute,
  AuthuserLayoutProgramIndexRoute: AuthuserLayoutProgramIndexRoute,
  AuthuserLayoutSessionIndexRoute: AuthuserLayoutSessionIndexRoute,
  AuthuserLayoutTriviaIndexRoute: AuthuserLayoutTriviaIndexRoute,
  AuthuserLayoutSessionIdResultRoute: AuthuserLayoutSessionIdResultRoute,
  AuthuserLayoutProgramIdIndexRoute: AuthuserLayoutProgramIdIndexRoute,
  AuthuserLayoutSessionIdIndexRoute: AuthuserLayoutSessionIdIndexRoute,
  AuthuserLayoutProgramIdCourseCourseIdIndexRoute:
    AuthuserLayoutProgramIdCourseCourseIdIndexRoute,
  AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute:
    AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute,
  AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute:
    AuthuserLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute,
}

const AuthuserLayoutRouteWithChildren = AuthuserLayoutRoute._addFileChildren(
  AuthuserLayoutRouteChildren,
)

interface AuthuserRouteChildren {
  AuthuserLayoutRoute: typeof AuthuserLayoutRouteWithChildren
}

const AuthuserRouteChildren: AuthuserRouteChildren = {
  AuthuserLayoutRoute: AuthuserLayoutRouteWithChildren,
}

const AuthuserRouteWithChildren = AuthuserRoute._addFileChildren(
  AuthuserRouteChildren,
)

interface AuthRouteChildren {
  AuthuserRoute: typeof AuthuserRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthuserRoute: AuthuserRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AdminAuthRoute: AdminAuthRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
