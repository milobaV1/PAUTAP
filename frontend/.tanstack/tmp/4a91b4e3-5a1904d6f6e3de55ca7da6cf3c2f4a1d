/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminLayoutRouteImport } from './routes/admin/_layout'
import { Route as userLayoutRouteImport } from './routes/(user)/_layout'
import { Route as AdminLayoutIndexRouteImport } from './routes/admin/_layout/index'
import { Route as userLayoutIndexRouteImport } from './routes/(user)/_layout/index'
import { Route as userLayoutCourseIndexRouteImport } from './routes/(user)/_layout/course/index'
import { Route as userLayoutCourseIdRouteImport } from './routes/(user)/_layout/course/$id'

const AdminRouteImport = createFileRoute('/admin')()
const userRouteImport = createFileRoute('/(user)')()

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const userRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLayoutRoute = AdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AdminRoute,
} as any)
const userLayoutRoute = userLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => userRoute,
} as any)
const AdminLayoutIndexRoute = AdminLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminLayoutRoute,
} as any)
const userLayoutIndexRoute = userLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userLayoutRoute,
} as any)
const userLayoutCourseIndexRoute = userLayoutCourseIndexRouteImport.update({
  id: '/course/',
  path: '/course/',
  getParentRoute: () => userLayoutRoute,
} as any)
const userLayoutCourseIdRoute = userLayoutCourseIdRouteImport.update({
  id: '/course/$id',
  path: '/course/$id',
  getParentRoute: () => userLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/': typeof userLayoutIndexRoute
  '/admin': typeof AdminLayoutRouteWithChildren
  '/admin/': typeof AdminLayoutIndexRoute
  '/course/$id': typeof userLayoutCourseIdRoute
  '/course': typeof userLayoutCourseIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof AdminLayoutIndexRoute
  '/': typeof userLayoutIndexRoute
  '/course/$id': typeof userLayoutCourseIdRoute
  '/course': typeof userLayoutCourseIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRoute
  '/(user)': typeof userRouteWithChildren
  '/(user)/_layout': typeof userLayoutRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/admin/_layout': typeof AdminLayoutRouteWithChildren
  '/(user)/_layout/': typeof userLayoutIndexRoute
  '/admin/_layout/': typeof AdminLayoutIndexRoute
  '/(user)/_layout/course/$id': typeof userLayoutCourseIdRoute
  '/(user)/_layout/course/': typeof userLayoutCourseIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/' | '/admin' | '/admin/' | '/course/$id' | '/course'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/admin' | '/' | '/course/$id' | '/course'
  id:
    | '__root__'
    | '/login'
    | '/(user)'
    | '/(user)/_layout'
    | '/admin'
    | '/admin/_layout'
    | '/(user)/_layout/'
    | '/admin/_layout/'
    | '/(user)/_layout/course/$id'
    | '/(user)/_layout/course/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  userRoute: typeof userRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/_layout': {
      id: '/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLayoutRouteImport
      parentRoute: typeof AdminRoute
    }
    '/(user)/_layout': {
      id: '/(user)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userLayoutRouteImport
      parentRoute: typeof userRoute
    }
    '/admin/_layout/': {
      id: '/admin/_layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminLayoutIndexRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
    '/(user)/_layout/': {
      id: '/(user)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userLayoutIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/course/': {
      id: '/(user)/_layout/course/'
      path: '/course'
      fullPath: '/course'
      preLoaderRoute: typeof userLayoutCourseIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/course/$id': {
      id: '/(user)/_layout/course/$id'
      path: '/course/$id'
      fullPath: '/course/$id'
      preLoaderRoute: typeof userLayoutCourseIdRouteImport
      parentRoute: typeof userLayoutRoute
    }
  }
}

interface userLayoutRouteChildren {
  userLayoutIndexRoute: typeof userLayoutIndexRoute
  userLayoutCourseIdRoute: typeof userLayoutCourseIdRoute
  userLayoutCourseIndexRoute: typeof userLayoutCourseIndexRoute
}

const userLayoutRouteChildren: userLayoutRouteChildren = {
  userLayoutIndexRoute: userLayoutIndexRoute,
  userLayoutCourseIdRoute: userLayoutCourseIdRoute,
  userLayoutCourseIndexRoute: userLayoutCourseIndexRoute,
}

const userLayoutRouteWithChildren = userLayoutRoute._addFileChildren(
  userLayoutRouteChildren,
)

interface userRouteChildren {
  userLayoutRoute: typeof userLayoutRouteWithChildren
}

const userRouteChildren: userRouteChildren = {
  userLayoutRoute: userLayoutRouteWithChildren,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

interface AdminLayoutRouteChildren {
  AdminLayoutIndexRoute: typeof AdminLayoutIndexRoute
}

const AdminLayoutRouteChildren: AdminLayoutRouteChildren = {
  AdminLayoutIndexRoute: AdminLayoutIndexRoute,
}

const AdminLayoutRouteWithChildren = AdminLayoutRoute._addFileChildren(
  AdminLayoutRouteChildren,
)

interface AdminRouteChildren {
  AdminLayoutRoute: typeof AdminLayoutRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminLayoutRoute: AdminLayoutRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  userRoute: userRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
