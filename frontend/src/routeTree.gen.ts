/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AdminAuthRouteImport } from './routes/_admin-auth'
import { Route as authResetPasswordDoneRouteImport } from './routes/(auth)/reset-password-done'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authForgotPasswordSentRouteImport } from './routes/(auth)/forgot-password-sent'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as AuthuserLayoutRouteImport } from './routes/_auth/(user)/_layout'
import { Route as AdminAuthAdminLayoutRouteImport } from './routes/_admin-auth/admin/_layout'
import { Route as AuthuserLayoutIndexRouteImport } from './routes/_auth/(user)/_layout/index'
import { Route as AdminAuthAdminLayoutIndexRouteImport } from './routes/_admin-auth/admin/_layout/index'
import { Route as AuthuserLayoutTriviaIndexRouteImport } from './routes/_auth/(user)/_layout/trivia/index'
import { Route as AuthuserLayoutSessionIndexRouteImport } from './routes/_auth/(user)/_layout/session/index'
import { Route as AuthuserLayoutProfileIndexRouteImport } from './routes/_auth/(user)/_layout/profile/index'
import { Route as AuthuserLayoutCertificateIndexRouteImport } from './routes/_auth/(user)/_layout/certificate/index'
import { Route as AdminAuthAdminLayoutUserIndexRouteImport } from './routes/_admin-auth/admin/_layout/user/index'
import { Route as AdminAuthAdminLayoutSessionIndexRouteImport } from './routes/_admin-auth/admin/_layout/session/index'
import { Route as AdminAuthAdminLayoutQuestionIndexRouteImport } from './routes/_admin-auth/admin/_layout/question/index'
import { Route as AuthuserLayoutSessionIdIndexRouteImport } from './routes/_auth/(user)/_layout/session/$id/index'
import { Route as AuthuserLayoutSessionIdResultRouteImport } from './routes/_auth/(user)/_layout/session/$id/result'
import { Route as AuthuserLayoutSessionIdCategoryCategoryIdIndexRouteImport } from './routes/_auth/(user)/_layout/session/$id/category/$categoryId/index'

const AuthuserRouteImport = createFileRoute('/_auth/(user)')()
const AdminAuthAdminRouteImport = createFileRoute('/_admin-auth/admin')()

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAuthRoute = AdminAuthRouteImport.update({
  id: '/_admin-auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthuserRoute = AuthuserRouteImport.update({
  id: '/(user)',
  getParentRoute: () => AuthRoute,
} as any)
const AdminAuthAdminRoute = AdminAuthAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AdminAuthRoute,
} as any)
const authResetPasswordDoneRoute = authResetPasswordDoneRouteImport.update({
  id: '/(auth)/reset-password-done',
  path: '/reset-password-done',
  getParentRoute: () => rootRouteImport,
} as any)
const authResetPasswordRoute = authResetPasswordRouteImport.update({
  id: '/(auth)/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordSentRoute = authForgotPasswordSentRouteImport.update({
  id: '/(auth)/forgot-password-sent',
  path: '/forgot-password-sent',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthuserLayoutRoute = AuthuserLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthuserRoute,
} as any)
const AdminAuthAdminLayoutRoute = AdminAuthAdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AdminAuthAdminRoute,
} as any)
const AuthuserLayoutIndexRoute = AuthuserLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthuserLayoutRoute,
} as any)
const AdminAuthAdminLayoutIndexRoute =
  AdminAuthAdminLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AuthuserLayoutTriviaIndexRoute =
  AuthuserLayoutTriviaIndexRouteImport.update({
    id: '/trivia/',
    path: '/trivia/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutSessionIndexRoute =
  AuthuserLayoutSessionIndexRouteImport.update({
    id: '/session/',
    path: '/session/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutProfileIndexRoute =
  AuthuserLayoutProfileIndexRouteImport.update({
    id: '/profile/',
    path: '/profile/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutCertificateIndexRoute =
  AuthuserLayoutCertificateIndexRouteImport.update({
    id: '/certificate/',
    path: '/certificate/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AdminAuthAdminLayoutUserIndexRoute =
  AdminAuthAdminLayoutUserIndexRouteImport.update({
    id: '/user/',
    path: '/user/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AdminAuthAdminLayoutSessionIndexRoute =
  AdminAuthAdminLayoutSessionIndexRouteImport.update({
    id: '/session/',
    path: '/session/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AdminAuthAdminLayoutQuestionIndexRoute =
  AdminAuthAdminLayoutQuestionIndexRouteImport.update({
    id: '/question/',
    path: '/question/',
    getParentRoute: () => AdminAuthAdminLayoutRoute,
  } as any)
const AuthuserLayoutSessionIdIndexRoute =
  AuthuserLayoutSessionIdIndexRouteImport.update({
    id: '/session/$id/',
    path: '/session/$id/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutSessionIdResultRoute =
  AuthuserLayoutSessionIdResultRouteImport.update({
    id: '/session/$id/result',
    path: '/session/$id/result',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)
const AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute =
  AuthuserLayoutSessionIdCategoryCategoryIdIndexRouteImport.update({
    id: '/session/$id/category/$categoryId/',
    path: '/session/$id/category/$categoryId/',
    getParentRoute: () => AuthuserLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof authForgotPasswordRoute
  '/forgot-password-sent': typeof authForgotPasswordSentRoute
  '/login': typeof authLoginRoute
  '/reset-password': typeof authResetPasswordRoute
  '/reset-password-done': typeof authResetPasswordDoneRoute
  '/admin': typeof AdminAuthAdminLayoutRouteWithChildren
  '/': typeof AuthuserLayoutIndexRoute
  '/admin/': typeof AdminAuthAdminLayoutIndexRoute
  '/admin/question': typeof AdminAuthAdminLayoutQuestionIndexRoute
  '/admin/session': typeof AdminAuthAdminLayoutSessionIndexRoute
  '/admin/user': typeof AdminAuthAdminLayoutUserIndexRoute
  '/certificate': typeof AuthuserLayoutCertificateIndexRoute
  '/profile': typeof AuthuserLayoutProfileIndexRoute
  '/session': typeof AuthuserLayoutSessionIndexRoute
  '/trivia': typeof AuthuserLayoutTriviaIndexRoute
  '/session/$id/result': typeof AuthuserLayoutSessionIdResultRoute
  '/session/$id': typeof AuthuserLayoutSessionIdIndexRoute
  '/session/$id/category/$categoryId': typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof authForgotPasswordRoute
  '/forgot-password-sent': typeof authForgotPasswordSentRoute
  '/login': typeof authLoginRoute
  '/reset-password': typeof authResetPasswordRoute
  '/reset-password-done': typeof authResetPasswordDoneRoute
  '/admin': typeof AdminAuthAdminLayoutIndexRoute
  '/': typeof AuthuserLayoutIndexRoute
  '/admin/question': typeof AdminAuthAdminLayoutQuestionIndexRoute
  '/admin/session': typeof AdminAuthAdminLayoutSessionIndexRoute
  '/admin/user': typeof AdminAuthAdminLayoutUserIndexRoute
  '/certificate': typeof AuthuserLayoutCertificateIndexRoute
  '/profile': typeof AuthuserLayoutProfileIndexRoute
  '/session': typeof AuthuserLayoutSessionIndexRoute
  '/trivia': typeof AuthuserLayoutTriviaIndexRoute
  '/session/$id/result': typeof AuthuserLayoutSessionIdResultRoute
  '/session/$id': typeof AuthuserLayoutSessionIdIndexRoute
  '/session/$id/category/$categoryId': typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_admin-auth': typeof AdminAuthRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/forgot-password-sent': typeof authForgotPasswordSentRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(auth)/reset-password-done': typeof authResetPasswordDoneRoute
  '/_admin-auth/admin': typeof AdminAuthAdminRouteWithChildren
  '/_admin-auth/admin/_layout': typeof AdminAuthAdminLayoutRouteWithChildren
  '/_auth/(user)': typeof AuthuserRouteWithChildren
  '/_auth/(user)/_layout': typeof AuthuserLayoutRouteWithChildren
  '/_admin-auth/admin/_layout/': typeof AdminAuthAdminLayoutIndexRoute
  '/_auth/(user)/_layout/': typeof AuthuserLayoutIndexRoute
  '/_admin-auth/admin/_layout/question/': typeof AdminAuthAdminLayoutQuestionIndexRoute
  '/_admin-auth/admin/_layout/session/': typeof AdminAuthAdminLayoutSessionIndexRoute
  '/_admin-auth/admin/_layout/user/': typeof AdminAuthAdminLayoutUserIndexRoute
  '/_auth/(user)/_layout/certificate/': typeof AuthuserLayoutCertificateIndexRoute
  '/_auth/(user)/_layout/profile/': typeof AuthuserLayoutProfileIndexRoute
  '/_auth/(user)/_layout/session/': typeof AuthuserLayoutSessionIndexRoute
  '/_auth/(user)/_layout/trivia/': typeof AuthuserLayoutTriviaIndexRoute
  '/_auth/(user)/_layout/session/$id/result': typeof AuthuserLayoutSessionIdResultRoute
  '/_auth/(user)/_layout/session/$id/': typeof AuthuserLayoutSessionIdIndexRoute
  '/_auth/(user)/_layout/session/$id/category/$categoryId/': typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/forgot-password'
    | '/forgot-password-sent'
    | '/login'
    | '/reset-password'
    | '/reset-password-done'
    | '/admin'
    | '/'
    | '/admin/'
    | '/admin/question'
    | '/admin/session'
    | '/admin/user'
    | '/certificate'
    | '/profile'
    | '/session'
    | '/trivia'
    | '/session/$id/result'
    | '/session/$id'
    | '/session/$id/category/$categoryId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/forgot-password'
    | '/forgot-password-sent'
    | '/login'
    | '/reset-password'
    | '/reset-password-done'
    | '/admin'
    | '/'
    | '/admin/question'
    | '/admin/session'
    | '/admin/user'
    | '/certificate'
    | '/profile'
    | '/session'
    | '/trivia'
    | '/session/$id/result'
    | '/session/$id'
    | '/session/$id/category/$categoryId'
  id:
    | '__root__'
    | '/_admin-auth'
    | '/_auth'
    | '/(auth)/forgot-password'
    | '/(auth)/forgot-password-sent'
    | '/(auth)/login'
    | '/(auth)/reset-password'
    | '/(auth)/reset-password-done'
    | '/_admin-auth/admin'
    | '/_admin-auth/admin/_layout'
    | '/_auth/(user)'
    | '/_auth/(user)/_layout'
    | '/_admin-auth/admin/_layout/'
    | '/_auth/(user)/_layout/'
    | '/_admin-auth/admin/_layout/question/'
    | '/_admin-auth/admin/_layout/session/'
    | '/_admin-auth/admin/_layout/user/'
    | '/_auth/(user)/_layout/certificate/'
    | '/_auth/(user)/_layout/profile/'
    | '/_auth/(user)/_layout/session/'
    | '/_auth/(user)/_layout/trivia/'
    | '/_auth/(user)/_layout/session/$id/result'
    | '/_auth/(user)/_layout/session/$id/'
    | '/_auth/(user)/_layout/session/$id/category/$categoryId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminAuthRoute: typeof AdminAuthRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authForgotPasswordSentRoute: typeof authForgotPasswordSentRoute
  authLoginRoute: typeof authLoginRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
  authResetPasswordDoneRoute: typeof authResetPasswordDoneRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin-auth': {
      id: '/_admin-auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/(user)': {
      id: '/_auth/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthuserRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_admin-auth/admin': {
      id: '/_admin-auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAuthAdminRouteImport
      parentRoute: typeof AdminAuthRoute
    }
    '/(auth)/reset-password-done': {
      id: '/(auth)/reset-password-done'
      path: '/reset-password-done'
      fullPath: '/reset-password-done'
      preLoaderRoute: typeof authResetPasswordDoneRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password-sent': {
      id: '/(auth)/forgot-password-sent'
      path: '/forgot-password-sent'
      fullPath: '/forgot-password-sent'
      preLoaderRoute: typeof authForgotPasswordSentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/(user)/_layout': {
      id: '/_auth/(user)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthuserLayoutRouteImport
      parentRoute: typeof AuthuserRoute
    }
    '/_admin-auth/admin/_layout': {
      id: '/_admin-auth/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAuthAdminLayoutRouteImport
      parentRoute: typeof AdminAuthAdminRoute
    }
    '/_auth/(user)/_layout/': {
      id: '/_auth/(user)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthuserLayoutIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_admin-auth/admin/_layout/': {
      id: '/_admin-auth/admin/_layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminAuthAdminLayoutIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_auth/(user)/_layout/trivia/': {
      id: '/_auth/(user)/_layout/trivia/'
      path: '/trivia'
      fullPath: '/trivia'
      preLoaderRoute: typeof AuthuserLayoutTriviaIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/session/': {
      id: '/_auth/(user)/_layout/session/'
      path: '/session'
      fullPath: '/session'
      preLoaderRoute: typeof AuthuserLayoutSessionIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/profile/': {
      id: '/_auth/(user)/_layout/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthuserLayoutProfileIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/certificate/': {
      id: '/_auth/(user)/_layout/certificate/'
      path: '/certificate'
      fullPath: '/certificate'
      preLoaderRoute: typeof AuthuserLayoutCertificateIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_admin-auth/admin/_layout/user/': {
      id: '/_admin-auth/admin/_layout/user/'
      path: '/user'
      fullPath: '/admin/user'
      preLoaderRoute: typeof AdminAuthAdminLayoutUserIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_admin-auth/admin/_layout/session/': {
      id: '/_admin-auth/admin/_layout/session/'
      path: '/session'
      fullPath: '/admin/session'
      preLoaderRoute: typeof AdminAuthAdminLayoutSessionIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_admin-auth/admin/_layout/question/': {
      id: '/_admin-auth/admin/_layout/question/'
      path: '/question'
      fullPath: '/admin/question'
      preLoaderRoute: typeof AdminAuthAdminLayoutQuestionIndexRouteImport
      parentRoute: typeof AdminAuthAdminLayoutRoute
    }
    '/_auth/(user)/_layout/session/$id/': {
      id: '/_auth/(user)/_layout/session/$id/'
      path: '/session/$id'
      fullPath: '/session/$id'
      preLoaderRoute: typeof AuthuserLayoutSessionIdIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/session/$id/result': {
      id: '/_auth/(user)/_layout/session/$id/result'
      path: '/session/$id/result'
      fullPath: '/session/$id/result'
      preLoaderRoute: typeof AuthuserLayoutSessionIdResultRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
    '/_auth/(user)/_layout/session/$id/category/$categoryId/': {
      id: '/_auth/(user)/_layout/session/$id/category/$categoryId/'
      path: '/session/$id/category/$categoryId'
      fullPath: '/session/$id/category/$categoryId'
      preLoaderRoute: typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRouteImport
      parentRoute: typeof AuthuserLayoutRoute
    }
  }
}

interface AdminAuthAdminLayoutRouteChildren {
  AdminAuthAdminLayoutIndexRoute: typeof AdminAuthAdminLayoutIndexRoute
  AdminAuthAdminLayoutQuestionIndexRoute: typeof AdminAuthAdminLayoutQuestionIndexRoute
  AdminAuthAdminLayoutSessionIndexRoute: typeof AdminAuthAdminLayoutSessionIndexRoute
  AdminAuthAdminLayoutUserIndexRoute: typeof AdminAuthAdminLayoutUserIndexRoute
}

const AdminAuthAdminLayoutRouteChildren: AdminAuthAdminLayoutRouteChildren = {
  AdminAuthAdminLayoutIndexRoute: AdminAuthAdminLayoutIndexRoute,
  AdminAuthAdminLayoutQuestionIndexRoute:
    AdminAuthAdminLayoutQuestionIndexRoute,
  AdminAuthAdminLayoutSessionIndexRoute: AdminAuthAdminLayoutSessionIndexRoute,
  AdminAuthAdminLayoutUserIndexRoute: AdminAuthAdminLayoutUserIndexRoute,
}

const AdminAuthAdminLayoutRouteWithChildren =
  AdminAuthAdminLayoutRoute._addFileChildren(AdminAuthAdminLayoutRouteChildren)

interface AdminAuthAdminRouteChildren {
  AdminAuthAdminLayoutRoute: typeof AdminAuthAdminLayoutRouteWithChildren
}

const AdminAuthAdminRouteChildren: AdminAuthAdminRouteChildren = {
  AdminAuthAdminLayoutRoute: AdminAuthAdminLayoutRouteWithChildren,
}

const AdminAuthAdminRouteWithChildren = AdminAuthAdminRoute._addFileChildren(
  AdminAuthAdminRouteChildren,
)

interface AdminAuthRouteChildren {
  AdminAuthAdminRoute: typeof AdminAuthAdminRouteWithChildren
}

const AdminAuthRouteChildren: AdminAuthRouteChildren = {
  AdminAuthAdminRoute: AdminAuthAdminRouteWithChildren,
}

const AdminAuthRouteWithChildren = AdminAuthRoute._addFileChildren(
  AdminAuthRouteChildren,
)

interface AuthuserLayoutRouteChildren {
  AuthuserLayoutIndexRoute: typeof AuthuserLayoutIndexRoute
  AuthuserLayoutCertificateIndexRoute: typeof AuthuserLayoutCertificateIndexRoute
  AuthuserLayoutProfileIndexRoute: typeof AuthuserLayoutProfileIndexRoute
  AuthuserLayoutSessionIndexRoute: typeof AuthuserLayoutSessionIndexRoute
  AuthuserLayoutTriviaIndexRoute: typeof AuthuserLayoutTriviaIndexRoute
  AuthuserLayoutSessionIdResultRoute: typeof AuthuserLayoutSessionIdResultRoute
  AuthuserLayoutSessionIdIndexRoute: typeof AuthuserLayoutSessionIdIndexRoute
  AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute: typeof AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute
}

const AuthuserLayoutRouteChildren: AuthuserLayoutRouteChildren = {
  AuthuserLayoutIndexRoute: AuthuserLayoutIndexRoute,
  AuthuserLayoutCertificateIndexRoute: AuthuserLayoutCertificateIndexRoute,
  AuthuserLayoutProfileIndexRoute: AuthuserLayoutProfileIndexRoute,
  AuthuserLayoutSessionIndexRoute: AuthuserLayoutSessionIndexRoute,
  AuthuserLayoutTriviaIndexRoute: AuthuserLayoutTriviaIndexRoute,
  AuthuserLayoutSessionIdResultRoute: AuthuserLayoutSessionIdResultRoute,
  AuthuserLayoutSessionIdIndexRoute: AuthuserLayoutSessionIdIndexRoute,
  AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute:
    AuthuserLayoutSessionIdCategoryCategoryIdIndexRoute,
}

const AuthuserLayoutRouteWithChildren = AuthuserLayoutRoute._addFileChildren(
  AuthuserLayoutRouteChildren,
)

interface AuthuserRouteChildren {
  AuthuserLayoutRoute: typeof AuthuserLayoutRouteWithChildren
}

const AuthuserRouteChildren: AuthuserRouteChildren = {
  AuthuserLayoutRoute: AuthuserLayoutRouteWithChildren,
}

const AuthuserRouteWithChildren = AuthuserRoute._addFileChildren(
  AuthuserRouteChildren,
)

interface AuthRouteChildren {
  AuthuserRoute: typeof AuthuserRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthuserRoute: AuthuserRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AdminAuthRoute: AdminAuthRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authForgotPasswordSentRoute: authForgotPasswordSentRoute,
  authLoginRoute: authLoginRoute,
  authResetPasswordRoute: authResetPasswordRoute,
  authResetPasswordDoneRoute: authResetPasswordDoneRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
