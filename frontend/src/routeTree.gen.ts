/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminLayoutRouteImport } from './routes/admin/_layout'
import { Route as userLayoutRouteImport } from './routes/(user)/_layout'
import { Route as AdminLayoutIndexRouteImport } from './routes/admin/_layout/index'
import { Route as userLayoutIndexRouteImport } from './routes/(user)/_layout/index'
import { Route as AdminLayoutUserIndexRouteImport } from './routes/admin/_layout/user/index'
import { Route as AdminLayoutQuestionIndexRouteImport } from './routes/admin/_layout/question/index'
import { Route as userLayoutTriviaIndexRouteImport } from './routes/(user)/_layout/trivia/index'
import { Route as userLayoutProgramIndexRouteImport } from './routes/(user)/_layout/program/index'
import { Route as userLayoutCertificateIndexRouteImport } from './routes/(user)/_layout/certificate/index'
import { Route as userLayoutAssessmentIndexRouteImport } from './routes/(user)/_layout/assessment/index'
import { Route as userLayoutProgramIdIndexRouteImport } from './routes/(user)/_layout/program/$id/index'
import { Route as userLayoutAssessmentIdIndexRouteImport } from './routes/(user)/_layout/assessment/$id/index'
import { Route as userLayoutProgramIdCourseCourseIdIndexRouteImport } from './routes/(user)/_layout/program/$id/course/$courseId/index'
import { Route as userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRouteImport } from './routes/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId'

const AdminRouteImport = createFileRoute('/admin')()
const userRouteImport = createFileRoute('/(user)')()

const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const userRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLayoutRoute = AdminLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AdminRoute,
} as any)
const userLayoutRoute = userLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => userRoute,
} as any)
const AdminLayoutIndexRoute = AdminLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminLayoutRoute,
} as any)
const userLayoutIndexRoute = userLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userLayoutRoute,
} as any)
const AdminLayoutUserIndexRoute = AdminLayoutUserIndexRouteImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => AdminLayoutRoute,
} as any)
const AdminLayoutQuestionIndexRoute =
  AdminLayoutQuestionIndexRouteImport.update({
    id: '/question/',
    path: '/question/',
    getParentRoute: () => AdminLayoutRoute,
  } as any)
const userLayoutTriviaIndexRoute = userLayoutTriviaIndexRouteImport.update({
  id: '/trivia/',
  path: '/trivia/',
  getParentRoute: () => userLayoutRoute,
} as any)
const userLayoutProgramIndexRoute = userLayoutProgramIndexRouteImport.update({
  id: '/program/',
  path: '/program/',
  getParentRoute: () => userLayoutRoute,
} as any)
const userLayoutCertificateIndexRoute =
  userLayoutCertificateIndexRouteImport.update({
    id: '/certificate/',
    path: '/certificate/',
    getParentRoute: () => userLayoutRoute,
  } as any)
const userLayoutAssessmentIndexRoute =
  userLayoutAssessmentIndexRouteImport.update({
    id: '/assessment/',
    path: '/assessment/',
    getParentRoute: () => userLayoutRoute,
  } as any)
const userLayoutProgramIdIndexRoute =
  userLayoutProgramIdIndexRouteImport.update({
    id: '/program/$id/',
    path: '/program/$id/',
    getParentRoute: () => userLayoutRoute,
  } as any)
const userLayoutAssessmentIdIndexRoute =
  userLayoutAssessmentIdIndexRouteImport.update({
    id: '/assessment/$id/',
    path: '/assessment/$id/',
    getParentRoute: () => userLayoutRoute,
  } as any)
const userLayoutProgramIdCourseCourseIdIndexRoute =
  userLayoutProgramIdCourseCourseIdIndexRouteImport.update({
    id: '/program/$id/course/$courseId/',
    path: '/program/$id/course/$courseId/',
    getParentRoute: () => userLayoutRoute,
  } as any)
const userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute =
  userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRouteImport.update({
    id: '/program/$id/course/$courseId/assessment/$assessmentId',
    path: '/program/$id/course/$courseId/assessment/$assessmentId',
    getParentRoute: () => userLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/': typeof userLayoutIndexRoute
  '/admin': typeof AdminLayoutRouteWithChildren
  '/admin/': typeof AdminLayoutIndexRoute
  '/assessment': typeof userLayoutAssessmentIndexRoute
  '/certificate': typeof userLayoutCertificateIndexRoute
  '/program': typeof userLayoutProgramIndexRoute
  '/trivia': typeof userLayoutTriviaIndexRoute
  '/admin/question': typeof AdminLayoutQuestionIndexRoute
  '/admin/user': typeof AdminLayoutUserIndexRoute
  '/assessment/$id': typeof userLayoutAssessmentIdIndexRoute
  '/program/$id': typeof userLayoutProgramIdIndexRoute
  '/program/$id/course/$courseId': typeof userLayoutProgramIdCourseCourseIdIndexRoute
  '/program/$id/course/$courseId/assessment/$assessmentId': typeof userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/admin': typeof AdminLayoutIndexRoute
  '/': typeof userLayoutIndexRoute
  '/assessment': typeof userLayoutAssessmentIndexRoute
  '/certificate': typeof userLayoutCertificateIndexRoute
  '/program': typeof userLayoutProgramIndexRoute
  '/trivia': typeof userLayoutTriviaIndexRoute
  '/admin/question': typeof AdminLayoutQuestionIndexRoute
  '/admin/user': typeof AdminLayoutUserIndexRoute
  '/assessment/$id': typeof userLayoutAssessmentIdIndexRoute
  '/program/$id': typeof userLayoutProgramIdIndexRoute
  '/program/$id/course/$courseId': typeof userLayoutProgramIdCourseCourseIdIndexRoute
  '/program/$id/course/$courseId/assessment/$assessmentId': typeof userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/login': typeof LoginRoute
  '/(user)': typeof userRouteWithChildren
  '/(user)/_layout': typeof userLayoutRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/admin/_layout': typeof AdminLayoutRouteWithChildren
  '/(user)/_layout/': typeof userLayoutIndexRoute
  '/admin/_layout/': typeof AdminLayoutIndexRoute
  '/(user)/_layout/assessment/': typeof userLayoutAssessmentIndexRoute
  '/(user)/_layout/certificate/': typeof userLayoutCertificateIndexRoute
  '/(user)/_layout/program/': typeof userLayoutProgramIndexRoute
  '/(user)/_layout/trivia/': typeof userLayoutTriviaIndexRoute
  '/admin/_layout/question/': typeof AdminLayoutQuestionIndexRoute
  '/admin/_layout/user/': typeof AdminLayoutUserIndexRoute
  '/(user)/_layout/assessment/$id/': typeof userLayoutAssessmentIdIndexRoute
  '/(user)/_layout/program/$id/': typeof userLayoutProgramIdIndexRoute
  '/(user)/_layout/program/$id/course/$courseId/': typeof userLayoutProgramIdCourseCourseIdIndexRoute
  '/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId': typeof userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/'
    | '/admin'
    | '/admin/'
    | '/assessment'
    | '/certificate'
    | '/program'
    | '/trivia'
    | '/admin/question'
    | '/admin/user'
    | '/assessment/$id'
    | '/program/$id'
    | '/program/$id/course/$courseId'
    | '/program/$id/course/$courseId/assessment/$assessmentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/admin'
    | '/'
    | '/assessment'
    | '/certificate'
    | '/program'
    | '/trivia'
    | '/admin/question'
    | '/admin/user'
    | '/assessment/$id'
    | '/program/$id'
    | '/program/$id/course/$courseId'
    | '/program/$id/course/$courseId/assessment/$assessmentId'
  id:
    | '__root__'
    | '/login'
    | '/(user)'
    | '/(user)/_layout'
    | '/admin'
    | '/admin/_layout'
    | '/(user)/_layout/'
    | '/admin/_layout/'
    | '/(user)/_layout/assessment/'
    | '/(user)/_layout/certificate/'
    | '/(user)/_layout/program/'
    | '/(user)/_layout/trivia/'
    | '/admin/_layout/question/'
    | '/admin/_layout/user/'
    | '/(user)/_layout/assessment/$id/'
    | '/(user)/_layout/program/$id/'
    | '/(user)/_layout/program/$id/course/$courseId/'
    | '/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  userRoute: typeof userRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/_layout': {
      id: '/admin/_layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminLayoutRouteImport
      parentRoute: typeof AdminRoute
    }
    '/(user)/_layout': {
      id: '/(user)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userLayoutRouteImport
      parentRoute: typeof userRoute
    }
    '/admin/_layout/': {
      id: '/admin/_layout/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminLayoutIndexRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
    '/(user)/_layout/': {
      id: '/(user)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userLayoutIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/admin/_layout/user/': {
      id: '/admin/_layout/user/'
      path: '/user'
      fullPath: '/admin/user'
      preLoaderRoute: typeof AdminLayoutUserIndexRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
    '/admin/_layout/question/': {
      id: '/admin/_layout/question/'
      path: '/question'
      fullPath: '/admin/question'
      preLoaderRoute: typeof AdminLayoutQuestionIndexRouteImport
      parentRoute: typeof AdminLayoutRoute
    }
    '/(user)/_layout/trivia/': {
      id: '/(user)/_layout/trivia/'
      path: '/trivia'
      fullPath: '/trivia'
      preLoaderRoute: typeof userLayoutTriviaIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/program/': {
      id: '/(user)/_layout/program/'
      path: '/program'
      fullPath: '/program'
      preLoaderRoute: typeof userLayoutProgramIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/certificate/': {
      id: '/(user)/_layout/certificate/'
      path: '/certificate'
      fullPath: '/certificate'
      preLoaderRoute: typeof userLayoutCertificateIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/assessment/': {
      id: '/(user)/_layout/assessment/'
      path: '/assessment'
      fullPath: '/assessment'
      preLoaderRoute: typeof userLayoutAssessmentIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/program/$id/': {
      id: '/(user)/_layout/program/$id/'
      path: '/program/$id'
      fullPath: '/program/$id'
      preLoaderRoute: typeof userLayoutProgramIdIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/assessment/$id/': {
      id: '/(user)/_layout/assessment/$id/'
      path: '/assessment/$id'
      fullPath: '/assessment/$id'
      preLoaderRoute: typeof userLayoutAssessmentIdIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/program/$id/course/$courseId/': {
      id: '/(user)/_layout/program/$id/course/$courseId/'
      path: '/program/$id/course/$courseId'
      fullPath: '/program/$id/course/$courseId'
      preLoaderRoute: typeof userLayoutProgramIdCourseCourseIdIndexRouteImport
      parentRoute: typeof userLayoutRoute
    }
    '/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId': {
      id: '/(user)/_layout/program/$id/course/$courseId/assessment/$assessmentId'
      path: '/program/$id/course/$courseId/assessment/$assessmentId'
      fullPath: '/program/$id/course/$courseId/assessment/$assessmentId'
      preLoaderRoute: typeof userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRouteImport
      parentRoute: typeof userLayoutRoute
    }
  }
}

interface userLayoutRouteChildren {
  userLayoutIndexRoute: typeof userLayoutIndexRoute
  userLayoutAssessmentIndexRoute: typeof userLayoutAssessmentIndexRoute
  userLayoutCertificateIndexRoute: typeof userLayoutCertificateIndexRoute
  userLayoutProgramIndexRoute: typeof userLayoutProgramIndexRoute
  userLayoutTriviaIndexRoute: typeof userLayoutTriviaIndexRoute
  userLayoutAssessmentIdIndexRoute: typeof userLayoutAssessmentIdIndexRoute
  userLayoutProgramIdIndexRoute: typeof userLayoutProgramIdIndexRoute
  userLayoutProgramIdCourseCourseIdIndexRoute: typeof userLayoutProgramIdCourseCourseIdIndexRoute
  userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute: typeof userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute
}

const userLayoutRouteChildren: userLayoutRouteChildren = {
  userLayoutIndexRoute: userLayoutIndexRoute,
  userLayoutAssessmentIndexRoute: userLayoutAssessmentIndexRoute,
  userLayoutCertificateIndexRoute: userLayoutCertificateIndexRoute,
  userLayoutProgramIndexRoute: userLayoutProgramIndexRoute,
  userLayoutTriviaIndexRoute: userLayoutTriviaIndexRoute,
  userLayoutAssessmentIdIndexRoute: userLayoutAssessmentIdIndexRoute,
  userLayoutProgramIdIndexRoute: userLayoutProgramIdIndexRoute,
  userLayoutProgramIdCourseCourseIdIndexRoute:
    userLayoutProgramIdCourseCourseIdIndexRoute,
  userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute:
    userLayoutProgramIdCourseCourseIdAssessmentAssessmentIdRoute,
}

const userLayoutRouteWithChildren = userLayoutRoute._addFileChildren(
  userLayoutRouteChildren,
)

interface userRouteChildren {
  userLayoutRoute: typeof userLayoutRouteWithChildren
}

const userRouteChildren: userRouteChildren = {
  userLayoutRoute: userLayoutRouteWithChildren,
}

const userRouteWithChildren = userRoute._addFileChildren(userRouteChildren)

interface AdminLayoutRouteChildren {
  AdminLayoutIndexRoute: typeof AdminLayoutIndexRoute
  AdminLayoutQuestionIndexRoute: typeof AdminLayoutQuestionIndexRoute
  AdminLayoutUserIndexRoute: typeof AdminLayoutUserIndexRoute
}

const AdminLayoutRouteChildren: AdminLayoutRouteChildren = {
  AdminLayoutIndexRoute: AdminLayoutIndexRoute,
  AdminLayoutQuestionIndexRoute: AdminLayoutQuestionIndexRoute,
  AdminLayoutUserIndexRoute: AdminLayoutUserIndexRoute,
}

const AdminLayoutRouteWithChildren = AdminLayoutRoute._addFileChildren(
  AdminLayoutRouteChildren,
)

interface AdminRouteChildren {
  AdminLayoutRoute: typeof AdminLayoutRouteWithChildren
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminLayoutRoute: AdminLayoutRouteWithChildren,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  userRoute: userRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
